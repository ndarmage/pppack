!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module divdif ! in 
    interface  ! in :divdif
        subroutine cheby_t_zero(n,z) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: n
            real(kind=8) dimension(n),intent(out),depend(n) :: z
        end subroutine cheby_t_zero
        subroutine cheby_u_zero(n,z) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: n
            real(kind=8) dimension(n),intent(out),depend(n) :: z
        end subroutine cheby_u_zero
        subroutine data_to_dif(ntab,xtab,ytab,diftab) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(in),depend(ntab) :: ytab
            real(kind=8) dimension(ntab),intent(out),depend(ntab) :: diftab
        end subroutine data_to_dif
        subroutine data_to_dif_display(ntab,xtab,ytab,diftab) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(in),depend(ntab) :: ytab
            real(kind=8) dimension(ntab),intent(out),depend(ntab) :: diftab
        end subroutine data_to_dif_display
        subroutine data_to_r8poly(ntab,xtab,ytab,c) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(in),depend(ntab) :: ytab
            real(kind=8) dimension(ntab),intent(out),depend(ntab) :: c
        end subroutine data_to_r8poly
        subroutine dif_antideriv(nd,xd,yd,na,xa,ya) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd),intent(in),depend(nd) :: yd
            integer(kind=4) intent(out) :: na
            real(kind=8) dimension(nd + 1),intent(out),depend(nd) :: xa
            real(kind=8) dimension(nd + 1),intent(out),depend(nd) :: ya
        end subroutine dif_antideriv
        subroutine dif_append(ntab,xtab,diftab,xval,yval,ntab2,xtab2,diftab2) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(in),depend(ntab) :: diftab
            real(kind=8) intent(in) :: xval
            real(kind=8) intent(in) :: yval
            integer(kind=4) intent(out) :: ntab2
            real(kind=8) dimension(ntab + 1),intent(out),depend(ntab) :: xtab2
            real(kind=8) dimension(ntab + 1),intent(out),depend(ntab) :: diftab2
        end subroutine dif_append
        subroutine dif_basis(ntab,xtab,diftab) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab,ntab),intent(out),depend(ntab,ntab) :: diftab
        end subroutine dif_basis
        subroutine dif_basis_deriv(nd,xd,xdp,ddp) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd - 1),intent(out),depend(nd) :: xdp
            real(kind=8) dimension(nd - 1,nd),intent(out),depend(nd,nd) :: ddp
        end subroutine dif_basis_deriv
        subroutine dif_basis_derivk(nd,xd,k,xdp,ddp) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            integer(kind=4) intent(in) :: k
            real(kind=8) dimension(nd-k),intent(out),depend(nd,k) :: xdp
            real(kind=8) dimension(nd-k,nd),intent(out),depend(nd,k,nd) :: ddp
        end subroutine dif_basis_derivk
        subroutine dif_basis_i(ival,ntab,xtab,diftab) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: ival
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(out),depend(ntab) :: diftab
        end subroutine dif_basis_i
        subroutine dif_deriv_table(nd,xd,yd,xdp,ydp) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd),intent(in),depend(nd) :: yd
            real(kind=8) dimension(nd - 1),intent(out),depend(nd) :: xdp
            real(kind=8) dimension(nd - 1),intent(out),depend(nd) :: ydp
        end subroutine dif_deriv_table
        subroutine dif_derivk_table(nd,xd,dd,k,xdk,ddk) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd),intent(in),depend(nd) :: dd
            integer(kind=4) intent(in) :: k
            real(kind=8) dimension(nd-k),intent(out),depend(nd,k) :: xdk
            real(kind=8) dimension(nd-k),intent(out),depend(nd,k) :: ddk
        end subroutine dif_derivk_table
        subroutine dif_print(nd,xd,yd,title) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd),intent(in),depend(nd) :: yd
            character*(*) intent(in) :: title
        end subroutine dif_print
        subroutine dif_root(abserr,fxname,iprint,maxstp,maxtab,relerr,xroot,xtry1,xtry2) ! in :divdif:../../src/divdif/f90/divdif.f90
            real(kind=8) intent(in) :: abserr
            external fxname
            integer(kind=4) intent(in) :: iprint
            integer(kind=4) intent(in) :: maxstp
            integer(kind=4) intent(in) :: maxtab
            real(kind=8) intent(in) :: relerr
            real(kind=8) intent(out) :: xroot
            real(kind=8) intent(in) :: xtry1
            real(kind=8) intent(in) :: xtry2
            interface  ! in :divdif:../../src/divdif/f90/divdif.f90:dif_root
                function fxname(x) ! in :divdif:../../src/divdif/f90/divdif.f90:dif_root:unknown_interface
                    real(kind=8) intent(in) :: x
                    real(kind=8) :: fxname
                end function fxname
            end interface 
        end subroutine dif_root
        subroutine dif_shift_x(nd,xd,yd,xv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(inout) :: xd
            real(kind=8) dimension(nd),intent(inout),depend(nd) :: yd
            real(kind=8) intent(in) :: xv
        end subroutine dif_shift_x
        subroutine dif_shift_zero(nd,xd,yd) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(inout) :: xd
            real(kind=8) dimension(nd),intent(inout),depend(nd) :: yd
        end subroutine dif_shift_zero
        subroutine dif_to_r8poly(n,xd,yd,c) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=n),depend(xd) :: n=len(xd)
            real(kind=8) dimension(n),intent(in) :: xd
            real(kind=8) dimension(n),intent(in),depend(n) :: yd
            real(kind=8) dimension(n),intent(out),depend(n) :: c
        end subroutine dif_to_r8poly
        subroutine dif_val(ntab,xtab,diftab,xv,yv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(in),depend(ntab) :: diftab
            real(kind=8) intent(in) :: xv
            real(kind=8) intent(out) :: yv
        end subroutine dif_val
        subroutine dif_vals(nd,xd,yd,nv,xv,yv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xd)>=nd),depend(xd) :: nd=len(xd)
            real(kind=8) dimension(nd),intent(in) :: xd
            real(kind=8) dimension(nd),intent(in),depend(nd) :: yd
            integer(kind=4), optional,intent(in),check(len(xv)>=nv),depend(xv) :: nv=len(xv)
            real(kind=8) dimension(nv),intent(in) :: xv
            real(kind=8) dimension(nv),intent(out),depend(nv) :: yv
        end subroutine dif_vals
        subroutine lagrange_rule(n,x,w) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
            real(kind=8) dimension(n),intent(in) :: x
            real(kind=8) dimension(n),intent(out),depend(n) :: w
        end subroutine lagrange_rule
        subroutine lagrange_sum(n,x,w,y,xv,yv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
            real(kind=8) dimension(n),intent(in) :: x
            real(kind=8) dimension(n),intent(in),depend(n) :: w
            real(kind=8) dimension(n),intent(in),depend(n) :: y
            real(kind=8) intent(in) :: xv
            real(kind=8) intent(out) :: yv
        end subroutine lagrange_sum
        subroutine lagrange_val(n,x,y,xv,yv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
            real(kind=8) dimension(n),intent(in) :: x
            real(kind=8) dimension(n),intent(in),depend(n) :: y
            real(kind=8) intent(in) :: xv
            real(kind=8) intent(out) :: yv
        end subroutine lagrange_val
        subroutine nc_rule(n,a,b,xtab,weight) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=n),depend(xtab) :: n=len(xtab)
            real(kind=8) intent(in) :: a
            real(kind=8) intent(in) :: b
            real(kind=8) dimension(n),intent(in) :: xtab
            real(kind=8) dimension(n),intent(out),depend(n) :: weight
        end subroutine nc_rule
        subroutine ncc_rule(norder,xtab,weight) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: norder
            real(kind=8) dimension(norder),intent(out),depend(norder) :: xtab
            real(kind=8) dimension(norder),intent(out),depend(norder) :: weight
        end subroutine ncc_rule
        subroutine nco_rule(norder,xtab,weight) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: norder
            real(kind=8) dimension(norder),intent(out),depend(norder) :: xtab
            real(kind=8) dimension(norder),intent(out),depend(norder) :: weight
        end subroutine nco_rule
        subroutine r8_swap(x,y) ! in :divdif:../../src/divdif/f90/divdif.f90
            real(kind=8) :: x
            real(kind=8) :: y
        end subroutine r8_swap
        subroutine r8mat_transpose_print(m,n,a,title) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,intent(in),check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            real(kind=8) dimension(m,n),intent(in) :: a
            character*(*) intent(in) :: title
        end subroutine r8mat_transpose_print
        subroutine r8mat_transpose_print_some(m,n,a,ilo,jlo,ihi,jhi,title) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,intent(in),check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            real(kind=8) dimension(m,n),intent(in) :: a
            integer(kind=4) intent(in) :: ilo
            integer(kind=4) intent(in) :: jlo
            integer(kind=4) intent(in) :: ihi
            integer(kind=4) intent(in) :: jhi
            character*(*) intent(in) :: title
        end subroutine r8mat_transpose_print_some
        subroutine r8poly_ant_cof(n,poly_cof,poly_cof2) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(poly_cof)>=n),depend(poly_cof) :: n=len(poly_cof)
            real(kind=8) dimension(n),intent(in) :: poly_cof
            real(kind=8) dimension(n + 1),intent(out),depend(n) :: poly_cof2
        end subroutine r8poly_ant_cof
        subroutine r8poly_ant_val(n,c,xv,yv) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(c)>=n),depend(c) :: n=len(c)
            real(kind=8) dimension(n),intent(in) :: c
            real(kind=8) intent(in) :: xv
            real(kind=8) intent(out) :: yv
        end subroutine r8poly_ant_val
        subroutine r8poly_basis(ntab,xtab,poly_cof) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab,ntab),intent(out),depend(ntab,ntab) :: poly_cof
        end subroutine r8poly_basis
        subroutine r8poly_basis_1(ival,ntab,xtab,poly_cof) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: ival
            integer(kind=4), optional,intent(in),check(len(xtab)>=ntab),depend(xtab) :: ntab=len(xtab)
            real(kind=8) dimension(ntab),intent(in) :: xtab
            real(kind=8) dimension(ntab),intent(out),depend(ntab) :: poly_cof
        end subroutine r8poly_basis_1
        subroutine r8poly_der_cof(n,poly_cof,poly_cof2) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(poly_cof)>=n),depend(poly_cof) :: n=len(poly_cof)
            real(kind=8) dimension(n),intent(in) :: poly_cof
            real(kind=8) dimension(n - 1),intent(out),depend(n) :: poly_cof2
        end subroutine r8poly_der_cof
        subroutine r8poly_der_val(n,poly_cof,xval,yval) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(poly_cof)>=n),depend(poly_cof) :: n=len(poly_cof)
            real(kind=8) dimension(n),intent(in) :: poly_cof
            real(kind=8) intent(in) :: xval
            real(kind=8) intent(out) :: yval
        end subroutine r8poly_der_val
        subroutine r8poly_order(na,a,order) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(a)>=na),depend(a) :: na=len(a)
            real(kind=8) dimension(na),intent(in) :: a
            integer(kind=4) intent(out) :: order
        end subroutine r8poly_order
        subroutine r8poly_print(n,a,title) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(a)>=n),depend(a) :: n=len(a)
            real(kind=8) dimension(n),intent(in) :: a
            character*(*) intent(in) :: title
        end subroutine r8poly_print
        subroutine r8poly_shift(scale,shift,n,poly_cof) ! in :divdif:../../src/divdif/f90/divdif.f90
            real(kind=8) intent(in) :: scale
            real(kind=8) intent(in) :: shift
            integer(kind=4), optional,intent(in),check(len(poly_cof)>=n),depend(poly_cof) :: n=len(poly_cof)
            real(kind=8) dimension(n),intent(inout) :: poly_cof
        end subroutine r8poly_shift
        subroutine r8poly_val_horner(n,poly_cof,xval,yval) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(poly_cof)>=n),depend(poly_cof) :: n=len(poly_cof)
            real(kind=8) dimension(n),intent(in) :: poly_cof
            real(kind=8) intent(in) :: xval
            real(kind=8) intent(out) :: yval
        end subroutine r8poly_val_horner
        function r8vec_distinct(n,x) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(x)>=n),depend(x) :: n=len(x)
            real(kind=8) dimension(n),intent(in) :: x
            logical :: r8vec_distinct
        end function r8vec_distinct
        subroutine r8vec_even(n,alo,ahi,a) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: n
            real(kind=8) intent(in) :: alo
            real(kind=8) intent(in) :: ahi
            real(kind=8) dimension(n),intent(out),depend(n) :: a
        end subroutine r8vec_even
        subroutine r8vec_even_select(n,xlo,xhi,ival,xval) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: n
            real(kind=8) intent(in) :: xlo
            real(kind=8) intent(in) :: xhi
            integer(kind=4) intent(in) :: ival
            real(kind=8) intent(out) :: xval
        end subroutine r8vec_even_select
        subroutine r8vec_indicator(n,a) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4) intent(in) :: n
            real(kind=8) dimension(n),intent(out),depend(n) :: a
        end subroutine r8vec_indicator
        subroutine r8vec_print(n,a,title) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(a)>=n),depend(a) :: n=len(a)
            real(kind=8) dimension(n),intent(in) :: a
            character*(*) intent(in) :: title
        end subroutine r8vec_print
        subroutine roots_to_dif(nroots,roots,ntab,xtab,diftab) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(roots)>=nroots),depend(roots) :: nroots=len(roots)
            real(kind=8) dimension(nroots),intent(in) :: roots
            integer(kind=4) intent(out) :: ntab
            real(kind=8) dimension(nroots + 1),intent(out),depend(nroots) :: xtab
            real(kind=8) dimension(nroots + 1),intent(out),depend(nroots) :: diftab
        end subroutine roots_to_dif
        subroutine roots_to_r8poly(nroots,roots,nc,c) ! in :divdif:../../src/divdif/f90/divdif.f90
            integer(kind=4), optional,intent(in),check(len(roots)>=nroots),depend(roots) :: nroots=len(roots)
            real(kind=8) dimension(nroots),intent(in) :: roots
            integer(kind=4) intent(out) :: nc
            real(kind=8) dimension(nroots + 1),intent(out),depend(nroots) :: c
        end subroutine roots_to_r8poly
        subroutine timestamp ! in :divdif:../../src/divdif/f90/divdif.f90
        end subroutine timestamp
    end interface 
end python module divdif

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
